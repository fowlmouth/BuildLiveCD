#!/bin/sh -e

datadir="${goboPrograms}/BuildLiveCD/Current/Data"

root="$1"
shift
packagedir="$1"
shift
packagelist="$1"
packagelists="$@"

if ! [ -d "$packagedir" -a -f "$packagelist" ]
then
   echo "Usage: BuildRoot <root> <packagedir> <packagelist1> [packagelist2] ..."
   [ -d "$packagedir"  ] || echo "   $packagedir does not exist"
   [ -f "$packagelist" ] || echo "   $packagelist does not exist"
   exit 1
fi

if [ "$UID" != "0" ]
then
    echo "Running as superuser."
    exec sudo -u "#0" $0 $*
fi


function get_package_name() {
   packagename=`echo $1 | awk {'print $1'} | grep -v "^#"`

   if [ -e "$datadir/Packages-List-GoboLinuxTools-CVS" ] && grep -q "$packagename" "$datadir/Packages-List-GoboLinuxTools-CVS"
   then packagever=`date +%Y%m%d`
   else packagever=`echo $1 | awk {'print $2'} | grep -v "^#"`
   fi
   pkg=`ls $packagedir/${packagename}--${packagever}--* 2> /dev/null || true`
   [ -z "$pkg" ] && pkg=`ls $packagedir/${packagename}--* 2> /dev/null || true`
   if [ -z "$pkg" ]
   then
      echo "*** Package $packagename $packagever could not be filled. ***" >&2
      return 1
   fi
   if [ "`ls $packagedir/${packagename}--* | wc -l 2> /dev/null`" -gt 1 ]
   then  
      echo "*** More than one version for $packagename available. Aborting. ***" >&2
      return 1
   fi

   echo "$pkg"
}

cat $packagelists | while read line
do
   # just ensure that required packages are found
   ret=`echo "$line" | awk {'print $1'}`
   [ -z "$ret" ] || echo $ret | grep -q "^#" && continue
   get_package_name "$line" > /dev/null || exit 1
done

[ $? -eq 0 ] || exit 1

function do_link() {
   if [ -d "$root/$1" ]
   then
      pushd $root/$2 &>/dev/null
      (
         export verboseFD=100
         export normalFD=101
         export terseFD=102
         export errorFD=103
         export debugFD=104
         export logFD=105
         export questionFD=106
         eval "exec $verboseFD>/dev/null"
         eval "exec $normalFD>/dev/null"
         eval "exec $terseFD<&2"
         eval "exec $errorFD<&2"
         eval "exec $debugFD>/dev/null"
         eval "exec $logFD>/dev/null"

         export goboPrefix=$root
         export goboPrograms=$root/Programs 
         LinkOrExpandAll $root/$1 --relative --no-follow
      )
      popd &>/dev/null
   fi
}


function symlink_program() {
   full_path="$1"
   root=`readlink -f $2`
   gobolinks=/System/Links
   name=$(basename $(dirname $full_path))
   version=$(basename ${full_path})
   #echo "Linking ${full_path} inside ${gobolinks}" 1>&2
   
   do_link ${full_path}/bin ${gobolinks}/Executables
   do_link ${full_path}/sbin ${gobolinks}/Executables
   do_link ${full_path}/Resources/Wrappers ${gobolinks}/Executables
   do_link ${full_path}/Resources/Tasks ${gobolinks}/Tasks
   do_link ${full_path}/lib ${gobolinks}/Libraries
   do_link ${full_path}/man ${gobolinks}/Manuals
   do_link ${full_path}/info ${gobolinks}/Manuals/info
   do_link ${full_path}/include ${gobolinks}/Headers
   do_link ${full_path}/../Settings ${gobolinks}/../Settings
   do_link ${full_path}/Shared ${gobolinks}/Shared

   [ -f "${root}${full_path}/Resources/Environment" ] && \
   ln -nfs ../../../Programs/${name}/${version}/Resources/Environment ${root}${gobolinks}/Environment/${name}--${version}
   ln -nfs $version ${root}$(dirname ${full_path})/Current
}

function program_md5() {
   #
   # BIG FAT WARNING:
   # Assuming we have only one version per program
   #
   name="$1"
   cat "${root}"/../Checksums/$name--* 2> /dev/null | tail -1 || echo "0000"
}

function install_package() {
   package=`readlink -f "$1"`
   root="$2"
   base=$(basename $package)
   name=${base%%--*}
   version=${base#*--}
   version=`echo ${version%%--*} | sed -r 's/-r[0-9]+(p[0-9]+)?$//g'`
   
   #
   # BIG FAT WARNING:
   # Assuming we have only one version per program
   #
   packagemd5=`md5sum $package`
   if [ -d "$root/Programs/$name" ]
   then 
      if [ "`program_md5 $name`" =  "$packagemd5" ]
      then
         echo "Keeping $name $version..."

         # just keep package: md5 matches last installation
         return
      else
         echo "Removing existing $name..."

         # cleanup old md5 file
         rm -f "${root}"/../Checksums/$name--*
         # remove the installed package: $package was updated 
         rm -rf "$root/Programs/$name"
      fi
   fi
   echo "$packagemd5" > "${root}"/../Checksums/$name--$version
   
   echo "Installing $name $version..."
   pushd "$root/Programs" &> /dev/null
   tar xjpf "$package"

   # Remove empty dirs in Resources
   for i in `find "$name/$version/Resources" -type d 2> /dev/null | grep -v Variable | sort -r`
   do
       rmdir $i 2> /dev/null || true
   done
   
   # Fixes broken share->Shared instead of share->/System/Links/Shared
   lshare="$name/$version/share"
   [ -h "$lshare" ] && ln -nfs /System/Links/Shared "$lshare"

   dsettings="$name/$version/Resources/Defaults/Settings"
   [ -d "$dsettings" ] && cp -a "$dsettings" "$name/Settings"
   dvariable="$name/$version/Resources/Defaults/Variable"
   if [ -d "$dvariable" ]
   then
      cp -rf "$dvariable"/* /System/Variable
      ln -s /System/Variable "$name/Variable"
   fi
   
   # Handling Unmanaged files (emulating InstallPackage)
   # This is now handled by unionfs in InitRDScripts/bin/startGoboLinux
   #if [ -d "$name/$version/Resources/Unmanaged/" -a "$name" != "Linux" ]
   #then
   #   cp -fa $name/$version/Resources/Unmanaged/* ../ # warning: assuming we are under $root/Programs
   #fi
   
   popd &> /dev/null
   
   symlink_program /Programs/$name/$version $root
}

echo "BuildRoot: Building root $root..."

#
# Base Directories
#
function create_dir() {
   [ -d "$1" ] || mkdir -p "$1"
   [ "$2" ] && chown $2 "$1"
   [ "$3" ] && chmod $3 "$1"
   true
}

create_dir $root
create_dir $root/System/Links/Executables
create_dir $root/System/Links/Environment
create_dir $root/System/Links/Libraries
create_dir $root/System/Links/Headers
create_dir $root/System/Links/Manuals/info
create_dir $root/System/Links/Shared
# create_dir $root/System/Links/Shared/misc
create_dir $root/System/Links/Tasks
create_dir $root/System/Settings
create_dir $root/System/Variable
create_dir $root/System/Variable/tmp 0 a+wt
create_dir $root/System/Variable/log
create_dir $root/System/Variable/mail
create_dir $root/System/Variable/run
create_dir $root/System/Variable/lock
create_dir $root/System/Variable/spool
create_dir $root/System/Variable/cache
create_dir $root/System/Variable/empty 0 0755
create_dir $root/System/Variable/lib
create_dir $root/System/Variable/lib/misc
create_dir $root/System/Kernel
create_dir $root/System/Kernel/Boot
create_dir $root/System/Kernel/Objects
create_dir $root/System/Kernel/Modules
create_dir $root/System/Kernel/Devices
create_dir $root/System/Kernel/Status
create_dir $root/Users
create_dir $root/Users/root
create_dir $root/Files
create_dir $root/Files/Compile
create_dir $root/Files/Compile/Archives
create_dir $root/Files/Compile/Sources
create_dir $root/Files/Compile/Store
create_dir $root/Depot
create_dir $root/Mount
create_dir $root/Mount/.Pivot
create_dir $root/Mount/CD-ROM
create_dir $root/Mount/GoboLinux
create_dir $root/Mount/Floppy
create_dir $root/Mount/TmpFS
create_dir $root/Mount/Media
create_dir $root/Programs

#
# Legacy Links
#
create_dir $root/usr

function create_link() {
   [ -e "$2" ] || ln -nfs "$1" "$2"
   true
}

create_link System/Kernel/Objects    $root/sys
create_link System/Kernel/Devices    $root/dev
create_link System/Kernel/Status     $root/proc
create_link System/Variable          $root/var
create_link System/Variable/tmp      $root/tmp
# create_link System/Variable          $root/var/local
create_link System/Links/Libraries   $root/lib
create_link System/Settings          $root/etc
create_link System/Links/Executables $root/bin
create_link System/Links/Executables $root/sbin
create_link System/Kernel/Boot       $root/boot
create_link Mount                    $root/mnt
create_link Mount/Media              $root/media
create_link Files                    $root/srv

create_link /System/Kernel/Modules $root/System/Links/Libraries/modules

create_link .                            $root/usr/X11R6
create_link .                            $root/usr/local
# create_link /Files/Compile/Source $root/usr/src
create_link ../System/Links/Executables  $root/usr/bin
create_link ../System/Links/Headers      $root/usr/include
create_link ../System/Links/Libraries    $root/usr/lib
create_link ../System/Links/Manuals      $root/usr/man
create_link ../System/Links/Executables  $root/usr/sbin
create_link ../System/Links/Shared       $root/usr/share
create_link ../Manuals                   $root/System/Links/Shared/man

# create_link /Users $root/home
# create_link /Users/`whoami` $root/root # that potentially creates a broken link 

[ -e $root/System/Kernel/Devices/log     ] || mkfifo       $root/System/Kernel/Devices/log
[ -e $root/System/Kernel/Devices/null    ] || mknod -m0666 $root/System/Kernel/Devices/null    c 1 3
[ -e $root/System/Kernel/Devices/console ] || mknod -m0600 $root/System/Kernel/Devices/console c 5 1

mkdir -p "${root}"/../Checksums/

mksettings=`which MakeSystemSettings`
if [ "`md5sum "$mksettings"`" =  "`cat "${root}/../Checksums/MakeSystemSettings" 2> /dev/null`" ]
then
   echo "Skipping MakeSystemSettings"
else
   echo "Running MakeSystemSettings"
   rm -f "${root}"/../Checksums/$name--*
   pushd $root/System/Settings &> /dev/null
   # MakeSystemSettings overwrites existing files
   MakeSystemSettings
   popd &> /dev/null
   md5sum "$mksettings" > "${root}/../Checksums/MakeSystemSettings"
fi

for packagelist in ${packagelists[@]}
do
   echo "Installing packages from $packagelist"
   cat $packagelist | while read line
   do
      name=$(echo $line | awk {'print $1'})
      version=$(echo $line | awk {'print $2'})
      if [ -z "$name" ] || echo "$name" | grep -q "^#"
      then continue
      fi
      if echo "${version:0:1}" | grep -q "^#"
      then unset version
      fi
      pkg=`get_package_name $line`
      install_package "$pkg" "$root"
   done
done

cachefile=/System/Links/Environment/Cache
if [ ! -e "${root}${cachefile}" -o "`find "${root}/System/Links/Environment/" -newer "${root}${cachefile}" 2> /dev/null`" ] 
then
   echo "Updating ${root}${cachefile}..."
   echo -e "unset unsetvars\n[ ! \"\$goboSettings\" ] && unsetvars=true\n\nsource GoboPath\n" > ${root}${cachefile}
   for link in ${root}/System/Links/Environment/*--*
   do
      if [ -e ${link} ] 
      then
         cat ${link} >> ${root}${cachefile} || rm -f ${link}
         echo >> ${root}${cachefile}
      fi
   done
   unsetvars=(goboUserSettings goboUsers goboMount goboPrograms goboSystem goboScripts goboIndex goboManuals
              goboLinks goboExecutables goboLibraries goboHeaders goboShared goboVariable goboSettings goboKernel
              goboDaemons goboTasks goboEnvironment goboTemp goboBoot goboDevices goboStatus goboObjects
              goboModules goboInstall)

   echo -e "if [ \"\$unsetvars\" ]\nthen" >> ${root}${cachefile}
   for var in "${unsetvars[@]}"
   do
       echo "  unset $var" >> ${root}${cachefile} 
   done
   echo -e "fi\n" >> ${root}${cachefile}
else
   echo "Keeping ${root}/System/Links/Environment/Cache"
fi


# SymlinkProgram --relative is not perfect yet, but, ideally, we should call the following command
#echo "Checking for broken links at ${root}/System/Links/"
#find ${root}/System/Links/ | RemoveBroken

exit 0
